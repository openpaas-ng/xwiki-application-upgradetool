<?xml version="1.0" encoding="UTF-8"?>
<xwikidoc>
<web>Admin</web>
<name>UpgradeToolActivityGroovy</name>
<language></language>
<defaultLanguage>fr</defaultLanguage>
<translation>0</translation>
<parent></parent>
<creator>XWiki.ttest3</creator>
<author>XWiki.ttest3</author>
<customClass></customClass>
<contentAuthor>XWiki.ttest3</contentAuthor>
<creationDate>1351682605000</creationDate>
<date>1351876175000</date>
<contentUpdateDate>1351876175000</contentUpdateDate>
<version>4.24</version>
<title>UpgradeTool Event stream</title>
<template></template>
<defaultTemplate></defaultTemplate>
<validationScript></validationScript>
<comment>Copied from xwiki:Admin.UpgradeToolEventStreamGroovy</comment>
<minorEdit>false</minorEdit>
<syntaxId>xwiki/2.0</syntaxId>
<hidden>false</hidden>
<content>import org.xwiki.eventstream.Event;
import org.xwiki.eventstream.EventFactory;
import org.xwiki.eventstream.EventStream;
import org.xwiki.query.Query;
import org.xwiki.query.QueryManager;
import com.xpn.xwiki.api.Document;
import com.xpn.xwiki.web.Utils;
import com.xpn.xwiki.plugin.activitystream.api.ActivityEvent;
import org.xwiki.model.reference.DocumentReference;
import org.xwiki.model.reference.EntityReference;
import org.xwiki.model.reference.EntityReferenceResolver;
import org.xwiki.model.reference.EntityReferenceSerializer;
import org.xwiki.model.EntityType;
import org.apache.commons.lang3.StringUtils;
import com.xpn.xwiki.XWikiContext;
import com.xpn.xwiki.plugin.activitystream.api.ActivityEvent;
import com.xpn.xwiki.plugin.activitystream.api.ActivityStreamException;
import com.xpn.xwiki.plugin.activitystream.impl.ActivityEventImpl;
import com.xpn.xwiki.plugin.activitystream.plugin.ActivityStreamPlugin;

class UpgradeToolEventStream {

  private EventFactory eventFactory;
  //private EventStream eventStream;
  private QueryManager queryManager;
  private EntityReferenceResolver&lt;String&gt; resolver;
  private EntityReferenceSerializer&lt;String&gt; serializer;

  def context;

  public initialize(context) {    
    this.context = context
    //this.eventStream = Utils.getComponent(EventStream.class)
    this.eventFactory = Utils.getComponent(EventFactory.class)
    this.queryManager = Utils.getComponent(QueryManager.class)
    this.resolver = Utils.getComponent(EntityReferenceResolver.class);
    this.serializer = Utils.getComponent(EntityReferenceSerializer.class)
  }

  public getEventFactory() {
    return this.eventFactory;
  } 

  private XWikiContext getXWikiContext() {
    return this.context.getContext();
  }

  private ActivityStreamPlugin getPlugin(XWikiContext context) {
    return (ActivityStreamPlugin) context.getWiki().getPlugin("activitystream", context);
  }

  public void addEvent(Event e) {
    try {
      XWikiContext context = getXWikiContext();
      ActivityStreamPlugin plugin = getPlugin(context);
      plugin.getActivityStream().addActivityEvent(convertEventToActivity(e), context);
    } catch (ActivityStreamException ex) {
      // Unlikely; nothing we can do
    }
  }

  public void deleteEvent(Event e) {
    try {
      XWikiContext context = getXWikiContext();
      ActivityStreamPlugin plugin = getPlugin(context);
      plugin.getActivityStream().deleteActivityEvent(convertEventToActivity(e), context);
    } catch (ActivityStreamException ex) {
      // Unlikely; nothing we can do
    }
  }

  public Event addEvent(Document doc, String action) {
    // Adding an event to the stream :
    Event event = this.eventFactory.createEvent();
    event.setDocument(doc.getDocumentReference());

    event.setApplication("UpgradeToolStream");
    event.setType(action);

    Map&lt;String, String&gt; params = new HashMap&lt;String, String&gt;();
    params.put("cat", "meoooow !");
    params.put("dog", "ham !")
    params.put("sheep", "behehe !")
    event.setParameters(params);

    this.addEvent(event);

    return event;
  } 

  public List&lt;Event&gt; getEvents() {
    Query q = this.queryManager.createQuery("select event from ActivityEventImpl event where event.application='UpgradeToolStream'", Query.HQL);
    List&lt;ActivityEvent&gt; events = q.execute();
    return convertActivitiesToEvents(events);
  }

  public List&lt;Event&gt; getWikiEvents(String wiki) {
    Query q = this.queryManager.createQuery("select event from ActivityEventImpl event where event.application='UpgradeToolStream' and event.wiki='" + wiki + "'", Query.HQL);
    List&lt;ActivityEvent&gt; events = q.execute();
    return convertActivitiesToEvents(events);
  }

  public List&lt;Event&gt; getDocumentEvents(String space, String page) {
    Query q = this.queryManager.createQuery("select event from ActivityEventImpl event where event.application='UpgradeToolStream' and and event.space='" + space + "'event.page='" + page + "'", Query.HQL);
    List&lt;ActivityEvent&gt; events = q.execute();
    return convertActivitiesToEvents(events);
  }


  public List&lt;ActivityEvent&gt; getActivityEvents() {
    Query query = this.queryManager.createQuery("select event from ActivityEventImpl event where event.application='UpgradeToolStream'", Query.HQL);
    List&lt;ActivityEvent&gt; events = query.execute();

    return events;
  }
  
  private List&lt;Event&gt; convertActivitiesToEvents(List&lt;ActivityEvent&gt; events) {
    List&lt;Event&gt; result = new ArrayList&lt;Event&gt;(events.size());
    for (ActivityEvent e : events) {
      result.add(convertActivityToEvent(e));
    }
    return result;
  }
  
  private ActivityEvent convertEventToActivity(Event e)
  {
    ActivityEvent result = new ActivityEventImpl();
    result.setApplication(e.getApplication());
    result.setBody(e.getBody());
    result.setDate(e.getDate());
    result.setEventId(e.getId());
    result.setPage(e.getDocument().getName());
    if (e.getDocumentTitle() != null) {
      result.setParam1(e.getDocumentTitle());
    }
    if (e.getRelatedEntity() != null) {
      result.setParam2(this.serializer.serialize(e.getRelatedEntity()));
    }
    result.setPriority((e.getImportance().ordinal() + 1) * 10);

    result.setRequestId(e.getGroupId());
    result.setSpace(e.getSpace().getName());
    result.setStream(e.getStream());
    result.setTitle(e.getTitle());
    result.setType(e.getType());
    if (e.getUrl() != null) {
      result.setUrl(e.getUrl().toString());
    }
    result.setUser(this.serializer.serialize(e.getUser()));
    result.setVersion(e.getDocumentVersion());
    result.setWiki(e.getWiki().getName());

    //result.setParameters(e.getParameters());
      
    return result;
  }

  /**
   * Convert an old {@link ActivityEvent} to the new {@link Event}.
   * 
   * @param e the activity event to transform
   * @return the equivalent event
   */
  private Event convertActivityToEvent(ActivityEvent e) {
    Event result = this.eventFactory.createRawEvent();
    result.setApplication(e.getApplication());
    result.setBody(e.getBody());
    result.setDate(e.getDate());
    result.setDocument(new DocumentReference(e.getWiki(), e.getSpace(), e.getPage()));
    result.setId(e.getEventId());
    result.setDocumentTitle(e.getParam1());
    result.setImportance(Event.Importance.MEDIUM);
    if (e.getPriority() &gt; 0) {
      int priority = e.getPriority() / 10 - 1;
      if (priority &gt;= 0 &amp;&amp; priority &lt; Event.Importance.values().length) {
        result.setImportance(Event.Importance.values()[priority]);
      }
    }

    result.setGroupId(e.getRequestId());
    result.setStream(e.getStream());
    result.setTitle(e.getTitle());
    result.setType(e.getType());
    if (StringUtils.isNotBlank(e.getUrl())) {
      try {
        result.setUrl(new URL(e.getUrl()));
      } catch (MalformedURLException ex) {
        // Should not happen
      }
    }
    result.setUser(new DocumentReference(this.resolver.resolve(e.getUser(), EntityType.DOCUMENT)));
    result.setDocumentVersion(e.getVersion());

    //result.setParameters(e.getParameters());
    return result;
  }
}</content></xwikidoc>
